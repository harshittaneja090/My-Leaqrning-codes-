pragma solidity ^0.4.0; 

contract Ballot {
    //variables-----------------------------------------------------------------
    //ballot code with timestamp logic both works together
    
   //1. structure 1
    struct Voter {
        //datatype variables
        uint weight;
        bool voted;
        uint8 vote;
        address delegate;
    }
    
    //2. structure 2
    struct Proposal {
        // this for vote count 
        uint voteCount;
    }
    
 //timestamp code enumeration with some variable    
    enum Stage {Init ,Reg,Vote ,Done}
//enumerationtype variable declaration setting it as init state means initazise it with 0
Stage public stage=Stage.Init;
//unsigned integer variable startTime
uint startTime;



address chairperson;
//address mapped with structure(Voter type) 
    mapping(address => Voter) voters;
    // mapping variable        x
   //structure type(Proposal) array name
    Proposal[]                proposals;
    
    
//functions after this-------------------------------------------------------------- 

//init=0 ,Reg=1, vote=2, Done=3


//constructor(argument which you put into delop side inputType)
    function  Ballot(uint8 _numProposals) public {
         //getting adress of sender and putting into address type vraiable  thats is chairperson 
        chairperson = msg.sender;
        // dictionary[address].weight=1 we are setting wieghtage of chairperson vote to 2
        voters[chairperson].weight = 2;
             //array.length=3 as we pass three in the deploy 
        proposals.length = _numProposals;
        
        //timelogic code here
        // means if stage=0 then set stage =1 state.reg  as below done
         //if small stage equal to large stage Init then put it into small stage reg
         stage=Stage.Reg;
         startTime=now;
    }
    
    
    
    
    
}